# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - deploy
variables:
  DOCKER_IMAGE_PREFIX: "zeem-backend-"
  DOCKER_IMAGE_TAG: "$DOCKER_IMAGE_PREFIX$CI_COMMIT_REF_NAME"
  DOCKER_TLS_CERTDIR: "/certs"
  
build-job:       # This job runs in the build stage, which runs first.
  image: docker:20.10.16
  stage: build
  environment: $CI_COMMIT_REF_NAME

  only:
    - master
    - staging
  services: 
    - docker:20.10.16-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login --username "$CI_REGISTRY_USER" --password-stdin
    
  script:
    - echo "$Env_variable" > .env

    - docker build -t $DOCKER_IMAGE_TAG .
    - docker tag $DOCKER_IMAGE_TAG codistan/zeem:$DOCKER_IMAGE_TAG
    - docker push codistan/zeem:$DOCKER_IMAGE_TAG

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: $CI_COMMIT_REF_NAME
  only:
    - master
    - staging
  before_script:
    - apt update
    - mkdir ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - chmod 700 /root/.ssh
    - ssh-keyscan -H "$PUBLIC_KEY" >> ~/.ssh/known_hosts
  script:
    
    - ssh -o StrictHostKeyChecking=no ubuntu@$PUBLIC_KEY sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - ssh -o StrictHostKeyChecking=no ubuntu@$PUBLIC_KEY sudo docker image rm -f codistan/zeem:$DOCKER_IMAGE_TAG
    - ssh -o StrictHostKeyChecking=no ubuntu@$PUBLIC_KEY sudo docker pull codistan/zeem:$DOCKER_IMAGE_TAG 
    - ssh -o StrictHostKeyChecking=no ubuntu@$PUBLIC_KEY sudo docker rm -f backend-container
    - ssh -o StrictHostKeyChecking=no ubuntu@$PUBLIC_KEY sudo docker run -d --name backend-container -p 3300:3300 codistan/zeem:$DOCKER_IMAGE_TAG
    - ssh -o StrictHostKeyChecking=no ubuntu@$PUBLIC_KEY sudo docker image prune -f


